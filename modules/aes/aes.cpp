//
// Created by yildizozan on 2.01.2021.
//

#include "aes.h"

// xtime is a macro that finds the product of {02} and the argument to
// xtime modulo {1b}
#define xtime(x)   (((x)<<1) ^ ((((x)>>7) & 1) * 0x1b))

static const uint8_t sbox[16][16] = {
        {0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76},
        {0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0},
        {0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15},
        {0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75},
        {0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84},
        {0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF},
        {0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8},
        {0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2},
        {0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73},
        {0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB},
        {0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79},
        {0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08},
        {0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A},
        {0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E},
        {0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF},
        {0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16},
};

static const uint8_t rsbox[256] = {
        0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
        0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
        0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
        0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
        0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
        0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
        0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
        0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
        0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
        0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
        0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
        0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
        0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
        0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
        0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
};

static const uint8_t Mc[Nb][Nk] = {
        {0x02, 0x03, 0x01, 0x01},
        {0x01, 0x02, 0x03, 0x01},
        {0x01, 0x01, 0x02, 0x03},
        {0x03, 0x01, 0x01, 0x02},
};

static const uint8_t rcon[11] = {
        0x01,
        0x02,
        0x04,
        0x08,
        0x10,
        0x20,
        0x40,
        0x80,
        0x1B,
        0x36
};

void KeyExpand(uint8_t round, uint8_t *state) {

    uint8_t w0[4], w1[4], w2[4], w3[4];
    uint8_t temp[4] = {0, 0, 0, 0},
            w4[4] = {0, 0, 0, 0},
            w5[4] = {0, 0, 0, 0},
            w6[4] = {0, 0, 0, 0},
            w7[4] = {0, 0, 0, 0};

    for (size_t i = 0; i < 4; ++i) {
        w0[i % 4] = state[i];
    }
    for (size_t i = 4; i < 8; ++i) {
        w1[i % 4] = state[i];
    }
    for (size_t i = 8; i < 12; ++i) {
        w2[i % 4] = state[i];
    }
    for (size_t i = 12; i < 16; ++i) {
        w3[i % 4] = state[i];
    }

    // g(w[3])
    //Print1DArray(w3);
    LeftCircularShift(w3, temp);
    //Print1DArray(w3);
    SubstitutionBytesWord(temp, temp);
    //Print1DArray(w3);
    AddingRoundConstant(temp, temp, round);

    XOR(w0, temp, w4);    // w[4] = w[3] XOR w[0]
    XOR(w1, w4, w5);    // w[5] = w[4] XOR w[1]
    XOR(w2, w5, w6);    // w[6] = w[5] XOR w[2]
    XOR(w3, w6, w7);    // w[7] = w[6] XOR w[3]

//    Print1DArray(w3, 4);
//    Print1DArray(w4, 4);
//    Print1DArray(w5, 4);
//    Print1DArray(w6, 4);
//    Print1DArray(w7, 4);

    // Append 4 words
    for (size_t i = 0; i < 4; ++i) {
        state[i] = w4[i % 4];
    }
    for (size_t i = 4; i < 8; ++i) {
        state[i] = w5[i % 4];
    }
    for (size_t i = 8; i < 12; ++i) {
        state[i] = w6[i % 4];
    }
    for (size_t i = 12; i < 16; ++i) {
        state[i] = w7[i % 4];
    }

    //Debug("Expd:", output, Nb * Nk);
}

void AddRoundKey(state_t *state, const uint8_t subKey[]) {
    for (int i = 0; i < Nb * Nk; ++i) {
        //printf("%02X ^ %02X = %02X\n", (*state)[i], subKey[i], (*state)[i] ^ subKey[i]);
        (*state)[i] = subKey[i] ^ (*state)[i];
    }
}

void SubstitutionBytes(state_t *state) {
    //printf("Subs:\t");
    for (uint8_t i = 0; i < Nb * Nk; ++i) {
        uint8_t c = (*state)[i];
        uint8_t msb4 = (c >> 4);
        uint8_t lsb4 = c & 0x0F;
        (*state)[i] = sbox[msb4][lsb4];
        //printf("%02X\t", sbox[msb4][lsb4]);
    }
    //printf("\n");
}

void SubstitutionBytesWord(const uint8_t *values, uint8_t *output) {
    for (size_t i = 0; i < Nk; ++i) {
        uint8_t c = values[i];
        uint8_t msb4 = (c >> 4);
        uint8_t lsb4 = c & 0xf;
        output[i] = sbox[msb4][lsb4];
    }
}

void ShiftRows(state_t *state) {
    uint8_t temp = 0;
    uint8_t new_state[Nb][Nk] = {0};

    size_t index = 0;
    for (int col = 0; col < Nb; ++col) {
        for (int row = 0; row < Nk; ++row) {
            new_state[row][col] = (*state)[index++];
        }
    }

    //PrintState(new_state);

    // Rotate first row 1 columns to left
    temp = new_state[1][0];
    new_state[1][0] = new_state[1][1];
    new_state[1][1] = new_state[1][2];
    new_state[1][2] = new_state[1][3];
    new_state[1][3] = temp;

    // Rotate second row 2 columns to left
    temp = new_state[2][0];
    new_state[2][0] = new_state[2][2];
    new_state[2][2] = temp;
    temp = new_state[2][1];
    new_state[2][1] = new_state[2][3];
    new_state[2][3] = temp;

    // Rotate third row 3 columns to left
    temp = new_state[3][3];
    new_state[3][3] = new_state[3][2];
    new_state[3][2] = new_state[3][1];
    new_state[3][1] = new_state[3][0];
    new_state[3][0] = temp;

    index = 0;
    for (int col = 0; col < Nb; ++col) {
        for (int row = 0; row < Nk; ++row) {
            (*state)[index++] = new_state[row][col];
        }
    }

    //PrintState(state);
}

void MixColumns(state_t *state) {
    for (int i = 0; i < Nb * Nk; i += 4) {
        MixCol(&state[i]);
    }
}

void MixColumnsNew(state_t *state) {
    uint8_t i;
    uint8_t Tmp, Tm, t;
    for (i = 0; i < Nb * Nk; i += 4) {
        t = (*state)[i + 0];
        Tmp = (*state)[i + 0] ^ (*state)[i + 1] ^ (*state)[i + 2] ^ (*state)[i + 3];
        Tm = (*state)[i + 0] ^ (*state)[i + 1];
        Tm = xtime(Tm);
        (*state)[i + 0] ^= Tm ^ Tmp;
        Tm = (*state)[i + 1] ^ (*state)[i + 2];
        Tm = xtime(Tm);
        (*state)[i + 1] ^= Tm ^ Tmp;
        Tm = (*state)[i + 2] ^ (*state)[i + 3];
        Tm = xtime(Tm);
        (*state)[i + 2] ^= Tm ^ Tmp;
        Tm = (*state)[i + 3] ^ t;
        Tm = xtime(Tm);
        (*state)[i + 3] ^= Tm ^ Tmp;
    }
}

void MixCol(state_t *state) {
    uint a = (*state)[0];
    uint b = (*state)[1];
    uint c = (*state)[2];
    uint d = (*state)[3];

    uint8_t Tmp, Tm, t;
    t = a;

    printf("input:\t a=%02x b=%02x c=%02x d=%02x\n", a, b, c, d);

    Tmp = a ^ b ^ c ^ d;

    Tm = a ^ b;
    Tm = xtime(Tm);
    a = Tm ^ Tmp ^ a;

    Tm = b ^ c;
    Tm = xtime(Tm);
    b = Tm ^ Tmp ^ b;

    Tm = c ^ d;
    Tm = xtime(Tm);
    c = Tm ^ Tmp ^ c;

    Tm = d ^ t;
    Tm = xtime(Tm);
    d = Tm ^ Tmp ^ d;
    printf("output:\t a=%02x b=%02x c=%02x d=%02x\n", a, b, c, d);

    (*state)[0] = a;
    (*state)[1] = b;
    (*state)[2] = c;
    (*state)[3] = d;
}

void LeftCircularShift(const uint8_t *key, uint8_t *output) {
    uint8_t temp;
    temp = key[0];
    output[0] = key[1];
    output[1] = key[2];
    output[2] = key[3];
    output[3] = temp;
}

void XOR(const uint8_t *arr1, const uint8_t *arr2, uint8_t *result) {
    for (size_t i = 0; i < Nk; ++i) {
        //printf("%02X ^ %02X = %02X\n", arr1[i], arr2[i], arr1[i] ^ arr2[i]);
        result[i] = arr1[i] ^ arr2[i];
    }
}

void AddingRoundConstant(const uint8_t *key, uint8_t *output, unsigned int round) {
    uint8_t rconarr[4] = {rcon[round], 0x00, 0x00, 0x00};
    for (size_t i = 0; i < Nk; ++i) {
        output[i] = key[i] ^ rconarr[i];
    }
}

void Print1DArray(const uint8_t *word, const uint8_t size) {
    for (size_t i = 0; i < size; ++i) {
        printf("%02X\t", word[i]);
    }
    printf("\n");
}

void Print2DArray(const state_t *data, const uint8_t size) {
    for (uint8_t i = 0; i < Nb * Nk; ++i) {
        printf("%02X\t", (*data)[i]);
    }
    printf("\n");
}

void Debug(const char *msg, const uint8_t *data, const uint8_t size) {
    printf("%s\t", msg);
    Print1DArray(data, size);
}

void PrintState(const char *msg, state_t *state) {
    printf("%s\t", msg);
    for (int row = 0; row < Nb; ++row) {
        for (int col = 0; col < Nk; ++col) {
            printf("%02X\t", (*state)[row]);
        }
        //printf("\n");
    }
    printf("\n");
}

void Cipher(state_t *state, uint8_t *key) {
    uint8_t round = 0;

    AddRoundKey(state, key);

    for (; round < Nr - 1; ++round) {
        SubstitutionBytes(state);
        ShiftRows(state);
        MixColumnsNew(state);
        KeyExpand(round, key);
        AddRoundKey(state, key);
    }

    SubstitutionBytes(state);
    ShiftRows(state);
    KeyExpand(round, key);
    AddRoundKey(state, key);
}

